apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'io.fabric'
apply plugin: 'com.getkeepsafe.dexcount'

final Properties keystoreProperties = loadProperties('app/keystore.properties')
final Properties fabricProperties = loadProperties('app/fabric.properties')

Properties loadProperties(final String absolutePath) {
    loadProperties(rootProject.file(absolutePath))
}

static Properties loadProperties(final File file) {
    final Properties properties = new Properties()
    properties.load(new FileInputStream(file))
    properties
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId 'com.veyndan.paper.reddit'
        minSdkVersion 23
        targetSdkVersion 25
        versionCode 1
        versionName '1.0'
        vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = [
                FABRIC_KEY: fabricProperties['fabricKey']
        ]
        // TODO Should display this better by putting the below somewhere else (a different gradle file like keystore.gradle) and also making the services (e.g. Reddit, Imgur) separated either through comments or functions

        /**
         * Using Boolean.parseBoolean(â€¦) suppresses the warnings in Java code that constant bool is
         * always the same.
         */
        final Closure<String> suppressWarningsConstantConditionBoolean = { final Boolean bool ->
            "Boolean.parseBoolean(\"${bool.toString()}\")"
        }

        final Closure<String> dotCaseToCamelCase = { final String string ->
            string.replaceAll('\\.', '_').toUpperCase()
        }

        // TODO Improve naming for function name, parameters, and variables in function
        final Closure<Void> serviceBuildConfigFields = { final String api,
                                                         final List<String> expectedPropertyKeys ->
            assert expectedPropertyKeys
                    .collect { it.split('\\.')[0] }
                    .every { it == api }

            expectedPropertyKeys.each {
                final String keystorePropertyName = dotCaseToCamelCase it
                final String keystoreProperty = keystoreProperties[it]
                buildConfigField 'String', keystorePropertyName, "\"$keystoreProperty\""
            }

            final String hasApiCredentialsName = "HAS_${api.toUpperCase()}_API_CREDENTIALS"
            final boolean hasApiCredentials = expectedPropertyKeys
                    .collect { keystoreProperties.containsKey it }
                    .every { it }

            buildConfigField 'boolean', hasApiCredentialsName, "${suppressWarningsConstantConditionBoolean(hasApiCredentials)}"
        }

        // TODO Should the service parameter be passed in. It is very easy to infer from the second parameter but may not be as readable.
        serviceBuildConfigFields 'imgur', ['imgur.api.key']
        serviceBuildConfigFields 'reddit', ['reddit.api.key', 'reddit.api.secret', 'reddit.user.name', 'reddit.user.password']
        serviceBuildConfigFields 'twitter', ['twitter.api.key', 'twitter.api.secret']
    }
    buildTypes {
        debug {
            multiDexEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding.enabled = true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    // Adapter Delegates
    final String adapterDelegatesVersion = '3.0.1'
    compile "com.hannesdorfmann:adapterdelegates3:$adapterDelegatesVersion"

    // Apache Commons
    final String apacheCommonsVersion = '3.5'
    compile "org.apache.commons:commons-lang3:$apacheCommonsVersion"

    // Data Binding
    final String dataBindingVersion = '2.3.2'
    kapt "com.android.databinding:compiler:$dataBindingVersion"

    // Deep Link Dispatch
    final String deepLinkDispatchVersion = '3.0.0'
    compile "com.airbnb:deeplinkdispatch:$deepLinkDispatchVersion"
    kapt "com.airbnb:deeplinkdispatch-processor:$deepLinkDispatchVersion"

    // Flexbox Layout
    final String flexboxLayoutVersion = '0.2.6'
    compile "com.google.android:flexbox:$flexboxLayoutVersion"

    // Glide
    final String glideVersion = '3.7.0'
    compile "com.github.bumptech.glide:glide:$glideVersion"

    // Glide Integration
    final String glideOkHttpIntegrationVersion = '1.4.0'
    compile "com.github.bumptech.glide:okhttp3-integration:$glideOkHttpIntegrationVersion@aar"

    // Guava
    final String guavaVersion = '20.0'
    compile "com.google.guava:guava:$guavaVersion"

    // Kotlin
    final String kotlinVersion = '1.1.2-4'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion"

    // Leak Canary
    final String leakCanaryVersion = '1.5'
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // Moshi
    final String moshiVersion = '1.5.0'
    compile "com.squareup.moshi:moshi:$moshiVersion"

    // Navi
    final String naviVersion = '2.0'
    compile "com.trello.navi2:navi:$naviVersion"

    // OkHttp
    final String okHttpVersion = '3.6.0'
    compile "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    // Retrofit
    final String retrofitVersion = '2.2.0'
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    // RxAndroid
    final String rxAndroidVersion = '2.0.1'
    compile "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"

    // RxJava
    final String rxJavaVersion = '2.0.8'
    compile "io.reactivex.rxjava2:rxjava:$rxJavaVersion"

    // RxBinding
    final String rxBindingVersion = '2.0.0'
    compile "com.jakewharton.rxbinding2:rxbinding:$rxBindingVersion"
    compile "com.jakewharton.rxbinding2:rxbinding-kotlin:$rxBindingVersion"
    compile "com.jakewharton.rxbinding2:rxbinding-design:$rxBindingVersion"
    compile "com.jakewharton.rxbinding2:rxbinding-design-kotlin:$rxBindingVersion"
    compile "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:$rxBindingVersion"
    compile "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:$rxBindingVersion"

    // Spanny
    final String spannyVersion = '1.0.4'
    compile "com.binaryfork:spanny:$spannyVersion"

    // Support
    final String supportVersion = '25.3.1'
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:cardview-v7:$supportVersion"
    compile "com.android.support:customtabs:$supportVersion"
    compile "com.android.support:design:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"

    // Support Constraint Layout
    final String supportConstraintLayoutVersion = '1.0.2'
    compile "com.android.support.constraint:constraint-layout:$supportConstraintLayoutVersion"

    // Support MultiDex
    final String supportMultiDexVersion = '1.0.1'
    compile "com.android.support:multidex:$supportMultiDexVersion"

    // Timber
    final String timberVersion = '4.5.1'
    compile "com.jakewharton.timber:timber:$timberVersion"

    // Twitter
    final String twitterVersion = '2.3.2'
    compile("com.twitter.sdk.android:twitter:$twitterVersion@aar") {
        transitive = true;
    }
}
